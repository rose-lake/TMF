"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import logging.config
import os
from django.utils.log import DEFAULT_LOGGING

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "a3)+9bc=kwni&w@a0fm6fx99$4120p(==-mock-t+0e2$-6*_!"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["127.0.0.1", "localhost"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admindocs",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "TMF.apps.TmfConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "mysite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")


# Logging
# basic setup from:
# https://docs.djangoproject.com/en/3.0/topics/logging/#configuring-logging
# more involved setup, deactivating LOGGING_CONFIG and using DEFAULT_LOGGING from:
# https://gist.github.com/ipmb/0618f44dc5270f9a2be2826d0d933ed7

# Disable Django's logging setup
LOGGING_CONFIG = None
LOGLEVEL = os.environ.get("LOGLEVEL", "info").upper()
logging.config.dictConfig(
    {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "[%(asctime)s] %(levelname)s [%(module)s.%(funcName)s:%(lineno)d] %(message)s",
                "datefmt": "%Y-%m-%d %H:%M:%S",
            },
            "simple": {
                "format": "[%(asctime)s] %(levelname)s %(message)s",
                "datefmt": "%Y-%m-%d %H:%M:%S",
            },
            "django.server": DEFAULT_LOGGING["formatters"]["django.server"],
        },
        "filters": {"require_debug_true": {"()": "django.utils.log.RequireDebugTrue"}},
        "handlers": {
            # this logs project-specific ERROR and above to a file
            # this is to 'filter out' ERRORS ONLY into a particular spot
            "TMF_Project_ERRORfile": {
                "class": "logging.FileHandler",
                "level": "WARNING",
                "filename": os.path.join(BASE_DIR, "logs/TMF_Project_ERROR.log"),
                # also took out debug=true requirement here
                # "filters": ["require_debug_true"],
                "formatter": "verbose",
            },
            # this logs Project-Specific INFO AND ABOVE to a file
            # ERRORS kind of get lost in here, so I created the above
            "TMF_Project_logfile": {
                "class": "logging.FileHandler",
                "level": "INFO",
                "filename": os.path.join(BASE_DIR, "logs/TMF_Project.log"),
                "filters": ["require_debug_true"],
                "formatter": "verbose",
                # # good to have?
                # 'maxBytes': 1024*1024*15, # 15MB
                # 'backupCount': 10,
            },
            # this logs Project-Specific DEBUG AND ABOVE to the console
            # note re: filtering by one-level-only: apparently it's somewhat involved.
            # when you're ready, check out https://stackoverflow.com/questions/1383254/logging-streamhandler-and-standard-streams for some ideas
            "TMF_Project_DEBUG_console": {
                "class": "logging.StreamHandler",
                "level": "DEBUG",
                "filters": ["require_debug_true"],
                "formatter": "verbose",
            },
            # this is for django default logging
            "console": {
                "class": "logging.StreamHandler",
                "level": "INFO",
                "filters": ["require_debug_true"],
                "formatter": "simple",
            },
            "django.server": DEFAULT_LOGGING["handlers"]["django.server"],
        },
        "loggers": {
            # name the loggers 'module.file' below (e.g. TMF.views, TMF.apps, etc)
            # then use them in our app by setting logger = logging.getLogger(__name__)
            "TMF.views": {
                "handlers": [
                    "TMF_Project_ERRORfile",
                    "TMF_Project_logfile",
                    "TMF_Project_DEBUG_console",
                ],
                "level": "DEBUG",
            },
            # Default runserver request logging
            "django.server": DEFAULT_LOGGING["loggers"]["django.server"],
        },
    }
)

# # for debugging purposes, to see your current logging tree layout
# from logging_tree import printout
# printout()
